definitions:
  repository.Order:
    type: object
  repository.Pet:
    type: object
  repository.User:
    properties:
      email:
        type: string
      firstname:
        type: string
      id:
        type: integer
      lastname:
        type: string
      password:
        type: string
      phone:
        type: string
      userstatus:
        type: integer
    type: object
host: localhost:8080/
info:
  contact: {}
  description: This is a sample CRUD api.
  title: CRUD API
  version: "1.0"
paths:
  /api/orders/{id}:
    delete:
      consumes:
      - application/json
      description: mark order as deleted
      parameters:
      - description: id
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: order will be deleted
          schema:
            type: string
      summary: delete order
      tags:
      - UPDATE order
    get:
      consumes:
      - application/json
      description: get order by id
      parameters:
      - description: id
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: get order" repository.Order
          schema:
            type: string
      summary: get order
      tags:
      - GET order
  /api/orders/create:
    post:
      consumes:
      - application/json
      description: create new order
      parameters:
      - description: Order
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/repository.Order'
      produces:
      - application/json
      responses:
        "200":
          description: create new order
          schema:
            type: string
      summary: Create order
      tags:
      - CREATE
  /api/pets/{id}:
    delete:
      consumes:
      - application/json
      description: mark pet as deleted
      parameters:
      - description: id
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: pet will be deleted
          schema:
            type: string
      summary: delete pet
      tags:
      - UPDATE pet
    get:
      consumes:
      - application/json
      description: get pet by id
      parameters:
      - description: id
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: get pet" repository.Pet
          schema:
            type: string
      summary: get pet
      tags:
      - GET pet
  /api/pets/create:
    post:
      consumes:
      - application/json
      description: create new pet
      parameters:
      - description: Pet
        in: body
        name: pet
        required: true
        schema:
          $ref: '#/definitions/repository.Pet'
      produces:
      - application/json
      responses:
        "200":
          description: create new pet
          schema:
            type: string
      summary: Create pet
      tags:
      - CREATE
  /api/pets/status:
    get:
      consumes:
      - application/json
      description: find pets by status
      parameters:
      - description: status
        in: query
        name: status
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: get pets by status" repository.Pet
          schema:
            type: string
      summary: Find pets by status
      tags:
      - SEARCH pet
  /api/pets/update:
    put:
      consumes:
      - application/json
      description: update pet
      parameters:
      - description: Pet
        in: body
        name: id
        required: true
        schema:
          $ref: '#/definitions/repository.Pet'
      produces:
      - application/json
      responses:
        "200":
          description: Pet updated
          schema:
            type: string
      summary: update pet
      tags:
      - GET pet
  /api/users/{id}:
    delete:
      consumes:
      - application/json
      description: mark user as deleted
      parameters:
      - description: username
        in: query
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: user will be deleted
          schema:
            type: string
      summary: delete user
      tags:
      - UPDATE user
    get:
      consumes:
      - application/json
      description: get user by username
      parameters:
      - description: username
        in: query
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: get user" repository.User
          schema:
            type: string
      summary: get user
      tags:
      - GET user
  /api/users/create:
    post:
      consumes:
      - application/json
      description: create new user
      parameters:
      - description: user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/repository.User'
      produces:
      - application/json
      responses:
        "200":
          description: create new user
          schema:
            type: string
      summary: Create user
      tags:
      - CREATE
  /api/users/update:
    put:
      consumes:
      - application/json
      description: update user
      parameters:
      - description: username
        in: query
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: update user
      tags:
      - GET user
swagger: "2.0"
